#  -------------------------------------
#  how-to-bring-up-docker-wsl-ubuntu2204
#  -------------------------------------
#  sudo apt update
#  sudo apt list --upgradable
#  sudo apt install docker.io
#  sudo dockerd
#  pstree 
#  # only user in docker group can connect to docker daemon
#  echo $USER
#  usermod -aG docker $USER 
#  sudo usermod -aG docker $USER 
#  cat /etc/group
#  # usermod change needs logout/login in to be effective
#  docker run hello-world

#  -------------------------------------
#  how-to-tweak-tmux-wsl-ubuntu2204
#  -------------------------------------
#  cd ~
#  git clone https://github.com/weigian/wsl_dotfiles
#  cp -f wsl_dotfiles/tmux.conf .tmux.conf

#  -------------------------------------
#  how-to-install-bring-up-myHDL 2024/02/11
#  -------------------------------------
#!/bin/sh

#  myHDL shell script
#  https://docs.myhdl.org/en/stable/manual/preface.html

setup_and_install_myHDL()
{
    echo "setup_and_install_myHDL()"
#
# pip3 install --upgrade pip
# pip3 install virtualenv
        pip3 list
        Package    Version
        ---------- -------
        pip        21.3.1
        setuptools 59.5.0

# virtualenv env01
# source env01/bin/activate

# pip3 install myhdl
# pip3 list

        Package             Version
        ------------------- -------
        distlib             0.3.8
        filelock            3.4.1
        importlib-metadata  4.8.3
        importlib-resources 5.4.0
        pip                 21.3.1
        platformdirs        2.4.0
        setuptools          59.5.0
        typing_extensions   4.1.1
        virtualenv          20.17.1
        zipp                3.6.0

# deactivate
}

fun run_myHDL_example()
{
    echo "run_myHDL_example"
        virtualenv env01
        source env01/bin/activate

        mkdir env01/tst
        cat > env01/tst/helloworld.py << EOF
from myhdl import block, delay, always, now

@block
def HelloWorld():

    @always(delay(10))
    def say_hello():
        print("%s Hello World!" % now())

    return say_hello

inst = HelloWorld()
inst.run_sim(30)
EOF

    python env01/tst/helloword.py
    deactivate
}

# --- main ---

setup_and_install_myHDL()
run_myHDL_example()

#  -------------------------------------
#  how-to-intall-icarus-iverilog-v13.0 2023/12/05
#  -------------------------------------
#  git clone https://github.com/steveicarus/iverilog.git
#  sudo apt update
#  sudo apt install -y autoconf gperf make gcc g++ bison flex
#  sh autoconf.sh
#  ./configure 
#  make
#  make check
#  sudo make install


#  -------------------------------------
#  how-to-duplicate-python-virtualenv 2024/02/11
#  -------------------------------------
pip freeze > requirements.txt
Then push the requirements.txt file to anywhere you want to deploy the code, and then just do what you did on dev machine -

$ virtualenv <env_name>
$ source <env_name>/bin/activate
(<env_name>)$ pip install -r path/to/requirements.txt


#  -------------------------------------
#  how-to-recovery-corrupt-tgz 2024/02/18
#  -------------------------------------
# https://www.urbanophile.com/arenn/coding/gzrt/gzrt.html
#  -------------------------------------

$ ls *.gz
my-corrupted-backup.tar.gz
$ gzrecover my-corrupted-backup.tar.gz
$ ls *.recovered
my-corrupted-backup.tar.recovered
$ cpio -F my-corrupted-backup.tar.recovered -i -v

#  -------------------------------------
# append from here
#  -------------------------------------

